notes:

use cases: 

1) 

	a.here = "seattle";
	a.city = a.here;
	a.city() -> 'seattle'

	a.here = "Rochester";
	a.city() -> "Rochester"

	Notes: a.city is "bound" to a.here with the assignment operation. Any changes to a.here
		   will be sent to a.city. This might be helpful for having multiple sources or destinations. Some helpful methods here would be:

		   a.city.stopFollowing(a.here); // basically unbind a live variable.
		   a.city.stopFollowingAll(); // unbind/unsubscribe from all.
		   a.city.followSameAs(a.anotherCity) // subscribe to same as another live variable.

2) 
	a.bgColor = 'yellow';
	app.myDiv.backgoundColor = a.bgColor;
	// backgroundColor of myDiv is now yellow.
	a.bgColor = "purple";
	// backgroundColor of myDiv is now purple.

	Notes: similar to usecase 1, but with css properties. backgroundColor is bound to 
		   a.bgColor.

3) 
	app.myDiv.innerHTML = app.input_1.value;

	Notes: typing in the input of input1 updates the innerHTML of myDiv. Also think of it as
		   myDiv.innerHTML is listening to changes of app.input_1.value.
	
4) 
	app.myDiv.css = { height : "100px", width : "200px"};

	and:

	app.myDiv.css = {height : a.height, width : a.width};

	Notes: batch assignment of css properties to myDiv. the second example shows the use of live
		   variables, which are then listened to by the corresponding css properties. It's the 
		   same as app.myDiv.height = a.height;

5) 
	app.myDiv.height = function(){
		return a.height * 3;
	}

	Notes: This would be the start of computed properties. a.height values that change make the function recalculate and update the app.myDiv.height property. this also can work for standard live variables like:

	a.numberOfPixelsInSquare = function(){
		return a.height * a.width;
	}

6) 
	/* Add "types" aka metaData to to live variables, as key/value pairs or as adding to an
	   an array */

	adding key/value types:

	a.liveVariable.addType = { "key" : "value"};
	or:
	a.liveVariable.addType({"key" : "value"});

	adding value types:

	a.liveVariable.addType = 'type';
	or:
	a.liveVariable.addType('type');

	will also need:
	a.liveVariable.removeType('type');
	a.liveVariable.removeAllTypes();
	a.liveVariable.hasType('type');
	a.liveVariable.returnArrayOfTypes();

7) 

	/* Beginning to work out templating structure*/

	example HTML: 

	<div id="template-main">
		<span>Hello</span>
		<span data-asd="name"></span>
	</div>

	or:

	<div id="template-main">
		<span>Hello</span>
		<span>{{name}}</span>
	</div>

	and the Javascript:

	a.model = { name : 'Broch' };

	app.myDiv.useTemplate('template').withDataFrom(a.model);

	or: 

	app.myDiv.useTemplate = {
		template: app.template, // or maybe 'template', since it's just an id reference.
		model: a.model
	}

	Notes: You might want to make it so templates aren't shown when the page loads, maybe
		   by parsing the id names, and adding an automatic "display: none" to anything that has
		   a prefix of "template-" in it. ie "template-main".

8) 
	/* dealing with foreach loops */

	HTML:

	<div id="template-main">
		<span data-asd="name"></span>
		<ul>
			<li data-asd="foreach-list"></li>
		<ul>
	</div>

	JS:

	a.model = {
		name : 'Names',
		list : ['hello', 'there', 'Broch']
	}

	app.myDiv.useTemplate('main').withDataFrom(a.model);

	app.myDiv.useTemplate = {
		template : 'main',
		model : a.model
	}







